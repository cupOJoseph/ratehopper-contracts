// SPDX-License-Identifier: MIT
pragma solidity ^0.8.28;

import {IERC20} from "./dependencies/IERC20.sol";
import {GPv2SafeERC20} from "./dependencies/GPv2SafeERC20.sol";
import {IUniswapV3Pool} from "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol";

import "./Types.sol";
import "./interfaces/safe/ISafe.sol";
import {IProtocolHandler} from "./interfaces/IProtocolHandler.sol";

import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";


contract SafeModuleDebtSwapUpgradeable is Initializable, OwnableUpgradeable, UUPSUpgradeable {
    using GPv2SafeERC20 for IERC20;
    uint8 public protocolFee;
    address public feeBeneficiary;
    address public operator;
    mapping(Protocol => address) public protocolHandlers;

    struct FlashCallbackData {
        Protocol fromProtocol;
        Protocol toProtocol;
        address fromAsset;
        address toAsset;
        uint256 amount;
        uint256 srcAmount;
        CollateralAsset[] collateralAssets;
        address onBehalfOf;
        bytes fromExtraData;
        bytes toExtraData;
        ParaswapParams paraswapParams;
    }

    event DebtSwapped(
        address indexed onBehalfOf,
        Protocol fromProtocol,
        Protocol toProtocol,
        address fromAsset,
        address toAsset,
        uint256 amount
    );

    modifier onlyOwnerOroperator(address onBehalfOf) {
        if (msg.sender == operator) {
            _;
            return;
        }

        // Check if caller is any owner of the Safe
        require(ISafe(onBehalfOf).isOwner(msg.sender), "Caller is not authorized");
        _;
    }

    /// @custom:oz-upgrades-unsafe-allow constructor
    constructor() {
        _disableInitializers();
    }

    /**
     * @dev Initializes the contract with protocol handlers and sets the operator
     * @param protocols Array of protocols to register
     * @param handlers Array of handler addresses corresponding to protocols
     */
    function initialize(Protocol[] memory protocols, address[] memory handlers) public initializer {
        require(protocols.length == handlers.length, "Protocols and handlers length mismatch");

        __Ownable_init(msg.sender);
        // __ReentrancyGuard_init();
        __UUPSUpgradeable_init();

        for (uint256 i = 0; i < protocols.length; i++) {
            require(handlers[i] != address(0), "Invalid handler address");
            protocolHandlers[protocols[i]] = handlers[i];
        }

        operator = msg.sender;
    }

    function setProtocolFee(uint8 _fee) public onlyOwner {
        require(_fee <= 100, "_fee cannot be greater than 1%");
        protocolFee = _fee;
    }

    function setFeeBeneficiary(address _feeBeneficiary) public onlyOwner {
        require(_feeBeneficiary != address(0), "_feeBeneficiary cannot be zero address");
        feeBeneficiary = _feeBeneficiary;
    }

    function setoperator(address _operator) public onlyOwner {
        require(_operator != address(0), "_operator cannot be zero address");
        operator = _operator;
    }



    function executeDebtSwap(
        address _flashloanPool,
        Protocol _fromProtocol,
        Protocol _toProtocol,
        address _fromDebtAsset,
        address _toDebtAsset,
        uint256 _amount,
        uint256 _srcAmount,
        CollateralAsset[] calldata _collateralAssets,
        address _onBehalfOf,
        bytes[2] calldata _extraData,
        ParaswapParams calldata _paraswapParams
    ) public onlyOwnerOroperator(_onBehalfOf) {
        require(_fromDebtAsset != address(0), "Invalid from asset address");
        require(_toDebtAsset != address(0), "Invalid to asset address");
        require(_amount > 0, "_amount cannot be zero");

        IUniswapV3Pool pool = IUniswapV3Pool(_flashloanPool);
        uint256 debtAmount = _amount;

        if (_amount == type(uint256).max) {
            address handler = protocolHandlers[_fromProtocol];

            debtAmount = IProtocolHandler(handler).getDebtAmount(_fromDebtAsset, _onBehalfOf, _extraData[0]);
        }

        address token0;
        try pool.token0() returns (address result) {
            token0 = result;
        } catch {
            revert("Invalid flashloan pool address");
        }

        uint256 amount0 = _fromDebtAsset == token0 ? debtAmount : 0;
        uint256 amount1 = _fromDebtAsset == token0 ? 0 : debtAmount;

        bytes memory data = abi.encode(
            FlashCallbackData({
                fromProtocol: _fromProtocol,
                toProtocol: _toProtocol,
                fromAsset: _fromDebtAsset,
                toAsset: _toDebtAsset,
                amount: debtAmount,
                srcAmount: _srcAmount,
                onBehalfOf: _onBehalfOf,
                collateralAssets: _collateralAssets,
                fromExtraData: _extraData[0],
                toExtraData: _extraData[1],
                paraswapParams: _paraswapParams
            })
        );

        pool.flash(address(this), amount0, amount1, data);
    }

    function uniswapV3FlashCallback(uint256 fee0, uint256 fee1, bytes calldata data) external {
        FlashCallbackData memory decoded = abi.decode(data, (FlashCallbackData));

        // implement the same logic as CallbackValidation.verifyCallback()
        // require(msg.sender == address(decoded.flashloanPool), "Caller is not flashloan pool");

        address safe = decoded.onBehalfOf;

        // suppose either of fee0 or fee1 is 0
        uint flashloanFeeOriginal = fee0 + fee1;
        uint8 fromAssetDecimals = IERC20(decoded.fromAsset).decimals();
        uint8 toAssetDecimals = IERC20(decoded.toAsset).decimals();
        uint8 conversionFactor = (fromAssetDecimals > toAssetDecimals) ? (fromAssetDecimals - toAssetDecimals) : 0;
        uint flashloanFee = flashloanFeeOriginal / (10 ** conversionFactor);

        uint256 protocolFeeAmount = (decoded.amount * protocolFee) / 10000;

        uint256 amountInMax = decoded.srcAmount == 0 ? decoded.amount : decoded.srcAmount;
        uint256 amountTotal = amountInMax + flashloanFee + protocolFeeAmount;

        if (decoded.fromProtocol == decoded.toProtocol) {
            address handler = protocolHandlers[decoded.fromProtocol];

            (bool success, ) = handler.delegatecall(
                abi.encodeCall(
                    IProtocolHandler.switchIn,
                    (
                        decoded.fromAsset,
                        decoded.toAsset,
                        decoded.amount,
                        amountTotal,
                        safe,
                        decoded.collateralAssets,
                        decoded.fromExtraData,
                        decoded.toExtraData
                    )
                )
            );
            require(success, "protocol switchIn failed");
        } else {
            address fromHandler = protocolHandlers[decoded.fromProtocol];
            (bool successFrom, ) = fromHandler.delegatecall(
                abi.encodeCall(
                    IProtocolHandler.switchFrom,
                    (decoded.fromAsset, decoded.amount, safe, decoded.collateralAssets, decoded.fromExtraData)
                )
            );
            require(successFrom, "protocol switchFrom failed");

            address toHandler = protocolHandlers[decoded.toProtocol];
            (bool successTo, ) = toHandler.delegatecall(
                abi.encodeCall(
                    IProtocolHandler.switchTo,
                    (decoded.toAsset, amountTotal, safe, decoded.collateralAssets, decoded.toExtraData)
                )
            );
            require(successTo, "protocol switchTo failed");
        }

        if (decoded.fromAsset != decoded.toAsset) {
            swapByParaswap(
                decoded.toAsset,
                amountTotal,
                decoded.paraswapParams.tokenTransferProxy,
                decoded.paraswapParams.router,
                decoded.paraswapParams.swapData
            );
        }

        // repay flashloan
        IERC20(decoded.fromAsset).transfer(msg.sender, decoded.amount + flashloanFeeOriginal);

        if (protocolFee > 0) {
            IERC20(decoded.toAsset).safeTransfer(feeBeneficiary, protocolFeeAmount);
        }

        // repay remaining amount
        IERC20 toToken = IERC20(decoded.toAsset);
        uint256 remainingBalance = toToken.balanceOf(address(this));

        if (remainingBalance > 0) {
            address handler = protocolHandlers[decoded.toProtocol];

            (bool success, ) = handler.delegatecall(
                abi.encodeCall(IProtocolHandler.repay, (decoded.toAsset, remainingBalance, safe, decoded.toExtraData))
            );

            require(success, "Repay remainingBalance failed");
        }

        // send dust amount back to user if it exists
        uint256 fromTokenRemainingBalance = IERC20(decoded.fromAsset).balanceOf(address(this));
        if (fromTokenRemainingBalance > 0) {
            IERC20(decoded.fromAsset).safeTransfer(decoded.onBehalfOf, fromTokenRemainingBalance);
        }

        emit DebtSwapped(
            decoded.onBehalfOf,
            decoded.fromProtocol,
            decoded.toProtocol,
            decoded.fromAsset,
            decoded.toAsset,
            decoded.amount
        );
    }

    function swapByParaswap(
        address asset,
        uint256 amount,
        address tokenTransferProxy,
        address router,
        bytes memory _txParams
    ) internal {
        IERC20(asset).approve(tokenTransferProxy, amount);
        (bool success, ) = router.call(_txParams);
        require(success, "Token swap by paraSwap failed");
    }

    function emergencyWithdraw(address token, uint256 amount) external onlyOwner {
        IERC20(token).safeTransfer(owner(), amount);
    }

    /**
     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by
     * {upgradeTo} and {upgradeToAndCall}.
     *
     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.
     */
    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}

    // /**
    //  * @dev Returns the current implementation address.
    //  */
    // function getImplementation() external view returns (address) {
    //     return getImplementation();
    // }
}
